-module(day9).

%% --- Day 9: Rope Bridge ---

%% This rope bridge creaks as you walk along it. You aren't sure how
%% old it is, or whether it can even support your weight.

%% It seems to support the Elves just fine, though. The bridge spans a
%% gorge which was carved out by the massive river far below you.

%% You step carefully; as you do, the ropes stretch and twist. You
%% decide to distract yourself by modeling rope physics; maybe you can
%% even figure out where not to step.

%% Consider a rope with a knot at each end; these knots mark the head
%% and the tail of the rope. If the head moves far enough away from
%% the tail, the tail is pulled toward the head.

%% Due to nebulous reasoning involving Planck lengths, you should be
%% able to model the positions of the knots on a two-dimensional
%% grid. Then, by following a hypothetical series of motions (your
%% puzzle input) for the head, you can determine how the tail will
%% move.

%% Due to the aforementioned Planck lengths, the rope must be quite
%% short; in fact, the head (H) and tail (T) must always be touching
%% (diagonally adjacent and even overlapping both count as touching):

%% ....
%% .TH.
%% ....

%% ....
%% .H..
%% ..T.
%% ....

%% ...
%% .H. (H covers T)
%% ...

%% If the head is ever two steps directly up, down, left, or right
%% from the tail, the tail must also move one step in that direction
%% so it remains close enough:

%% .....    .....    .....
%% .TH.. -> .T.H. -> ..TH.
%% .....    .....    .....

%% ...    ...    ...
%% .T.    .T.    ...
%% .H. -> ... -> .T.
%% ...    .H.    .H.
%% ...    ...    ...

%% Otherwise, if the head and tail aren't touching and aren't in the
%% same row or column, the tail always moves one step diagonally to
%% keep up:

%% .....    .....    .....
%% .....    ..H..    ..H..
%% ..H.. -> ..... -> ..T..
%% .T...    .T...    .....
%% .....    .....    .....

%% .....    .....    .....
%% .....    .....    .....
%% ..H.. -> ...H. -> ..TH.
%% .T...    .T...    .....
%% .....    .....    .....

%% You just need to work out where the tail goes as the head follows a
%% series of motions. Assume the head and the tail both start at the
%% same position, overlapping.

%% For example:

%% R 4
%% U 4
%% L 3
%% D 1
%% R 4
%% D 1
%% L 5
%% R 2

%% This series of motions moves the head right four steps, then up
%% four steps, then left three steps, then down one step, and so
%% on. After each step, you'll need to update the position of the tail
%% if the step means the head is no longer adjacent to the
%% tail. Visually, these motions occur as follows (s marks the
%% starting position as a reference point):

%% == Initial State ==

%% ......
%% ......
%% ......
%% ......
%% H.....  (H covers T, s)

%% == R 4 ==

%% ......
%% ......
%% ......
%% ......
%% TH....  (T covers s)

%% ......
%% ......
%% ......
%% ......
%% sTH...

%% ......
%% ......
%% ......
%% ......
%% s.TH..

%% ......
%% ......
%% ......
%% ......
%% s..TH.

%% == U 4 ==

%% ......
%% ......
%% ......
%% ....H.
%% s..T..

%% ......
%% ......
%% ....H.
%% ....T.
%% s.....

%% ......
%% ....H.
%% ....T.
%% ......
%% s.....

%% ....H.
%% ....T.
%% ......
%% ......
%% s.....

%% == L 3 ==

%% ...H..
%% ....T.
%% ......
%% ......
%% s.....

%% ..HT..
%% ......
%% ......
%% ......
%% s.....

%% .HT...
%% ......
%% ......
%% ......
%% s.....

%% == D 1 ==

%% ..T...
%% .H....
%% ......
%% ......
%% s.....

%% == R 4 ==

%% ..T...
%% ..H...
%% ......
%% ......
%% s.....

%% ..T...
%% ...H..
%% ......
%% ......
%% s.....

%% ......
%% ...TH.
%% ......
%% ......
%% s.....

%% ......
%% ....TH
%% ......
%% ......
%% s.....

%% == D 1 ==

%% ......
%% ....T.
%% .....H
%% ......
%% s.....

%% == L 5 ==

%% ......
%% ....T.
%% ....H.
%% ......
%% s.....

%% ......
%% ....T.
%% ...H..
%% ......
%% s.....

%% ......
%% ......
%% ..HT..
%% ......
%% s.....

%% ......
%% ......
%% .HT...
%% ......
%% s.....

%% ......
%% ......
%% HT....
%% ......
%% s.....

%% == R 2 ==

%% ......
%% ......
%% .H....  (H covers T)
%% ......
%% s.....

%% ......
%% ......
%% .TH...
%% ......
%% s.....

%% After simulating the rope, you can count up all of the positions
%% the tail visited at least once. In this diagram, s again marks the
%% starting position (which the tail also visited) and # marks other
%% positions the tail visited:

%% ..##..
%% ...##.
%% .####.
%% ....#.
%% s###..

%% So, there are 13 positions the tail visited at least once.

%% Simulate your complete hypothetical series of motions. How many
%% positions does the tail of the rope visit at least once?

%% --- Part Two ---

%% A rope snaps! Suddenly, the river is getting a lot closer than you
%% remember. The bridge is still there, but some of the ropes that
%% broke are now whipping toward you as you fall through the air!

%% The ropes are moving too quickly to grab; you only have a few
%% seconds to choose how to arch your body to avoid being
%% hit. Fortunately, your simulation can be extended to support longer
%% ropes.

%% Rather than two knots, you now must simulate a rope consisting of
%% ten knots. One knot is still the head of the rope and moves
%% according to the series of motions. Each knot further down the rope
%% follows the knot in front of it using the same rules as before.

%% Using the same series of motions as the above example, but with the
%% knots marked H, 1, 2, ..., 9, the motions now occur as follows:

%% == Initial State ==

%% ......
%% ......
%% ......
%% ......
%% H.....  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)

%% == R 4 ==

%% ......
%% ......
%% ......
%% ......
%% 1H....  (1 covers 2, 3, 4, 5, 6, 7, 8, 9, s)

%% ......
%% ......
%% ......
%% ......
%% 21H...  (2 covers 3, 4, 5, 6, 7, 8, 9, s)

%% ......
%% ......
%% ......
%% ......
%% 321H..  (3 covers 4, 5, 6, 7, 8, 9, s)

%% ......
%% ......
%% ......
%% ......
%% 4321H.  (4 covers 5, 6, 7, 8, 9, s)

%% == U 4 ==

%% ......
%% ......
%% ......
%% ....H.
%% 4321..  (4 covers 5, 6, 7, 8, 9, s)

%% ......
%% ......
%% ....H.
%% .4321.
%% 5.....  (5 covers 6, 7, 8, 9, s)

%% ......
%% ....H.
%% ....1.
%% .432..
%% 5.....  (5 covers 6, 7, 8, 9, s)

%% ....H.
%% ....1.
%% ..432.
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% == L 3 ==

%% ...H..
%% ....1.
%% ..432.
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ..H1..
%% ...2..
%% ..43..
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% .H1...
%% ...2..
%% ..43..
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% == D 1 ==

%% ..1...
%% .H.2..
%% ..43..
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% == R 4 ==

%% ..1...
%% ..H2..
%% ..43..
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ..1...
%% ...H..  (H covers 2)
%% ..43..
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ......
%% ...1H.  (1 covers 2)
%% ..43..
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ......
%% ...21H
%% ..43..
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% == D 1 ==

%% ......
%% ...21.
%% ..43.H
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% == L 5 ==

%% ......
%% ...21.
%% ..43H.
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ......
%% ...21.
%% ..4H..  (H covers 3)
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ......
%% ...2..
%% ..H1..  (H covers 4; 1 covers 3)
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ......
%% ...2..
%% .H13..  (1 covers 4)
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ......
%% ......
%% H123..  (2 covers 4)
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% == R 2 ==

%% ......
%% ......
%% .H23..  (H covers 1; 2 covers 4)
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% ......
%% ......
%% .1H3..  (H covers 2, 4)
%% .5....
%% 6.....  (6 covers 7, 8, 9, s)

%% Now, you need to keep track of the positions the new tail, 9,
%% visits. In this example, the tail never moves, and so it only
%% visits 1 position. However, be careful: more types of motion are
%% possible than before, so you might want to visually compare your
%% simulated rope to the one above.

%% Here's a larger example:

%% R 5
%% U 8
%% L 8
%% D 3
%% R 17
%% D 10
%% L 25
%% U 20

%% These motions occur as follows (individual steps are not shown):

%% == Initial State ==

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................

%% == R 5 ==

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ...........54321H.........  (5 covers 6, 7, 8, 9, s)
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................

%% == U 8 ==

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ................H.........
%% ................1.........
%% ................2.........
%% ................3.........
%% ...............54.........
%% ..............6...........
%% .............7............
%% ............8.............
%% ...........9..............  (9 covers s)
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................

%% == L 8 ==

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ........H1234.............
%% ............5.............
%% ............6.............
%% ............7.............
%% ............8.............
%% ............9.............
%% ..........................
%% ..........................
%% ...........s..............
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................

%% == D 3 ==

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% .........2345.............
%% ........1...6.............
%% ........H...7.............
%% ............8.............
%% ............9.............
%% ..........................
%% ..........................
%% ...........s..............
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................

%% == R 17 ==

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ................987654321H
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ...........s..............
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................

%% == D 10 ==

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ...........s.........98765
%% .........................4
%% .........................3
%% .........................2
%% .........................1
%% .........................H

%% == L 25 ==

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ...........s..............
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% H123456789................

%% == U 20 ==

%% H.........................
%% 1.........................
%% 2.........................
%% 3.........................
%% 4.........................
%% 5.........................
%% 6.........................
%% 7.........................
%% 8.........................
%% 9.........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ...........s..............
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................

%% Now, the tail (9) visits 36 positions (including s) at least once:

%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% ..........................
%% #.........................
%% #.............###.........
%% #............#...#........
%% .#..........#.....#.......
%% ..#..........#.....#......
%% ...#........#.......#.....
%% ....#......s.........#....
%% .....#..............#.....
%% ......#............#......
%% .......#..........#.......
%% ........#........#........
%% .........########.........

%% Simulate your complete series of motions on a larger rope with ten
%% knots. How many positions does the tail of the rope visit at least
%% once?

-export([run/0
        ,part1/0
        ,part2/0
        ]).

run() ->
    Input = input(),
    part1(Input),
    part2(Input).

part1() ->
    part1(input()).

part2() ->
    part2(input()).

part1(HeadMovements) ->
    Rope = lists:duplicate(2, {0,0}),
    GroundCovered = move_rope(HeadMovements, Rope, [{0,0}]),
    io:format("the 2-knot tail covered ~p spots~n", [length(GroundCovered)]).

part2(HeadMovements) ->
    Rope = lists:duplicate(10, {0,0}),
    GroundCovered = move_rope(HeadMovements, Rope, [{0,0}]),
    io:format("the 10-knot tail covered ~p spots~n", [length(GroundCovered)]).

move_rope([], _RopeKnots, GroundCovered) ->
    lists:usort(GroundCovered);
move_rope([{Dir, Steps} | Movements], [Head | RopeKnots], GroundCovered) ->
    {NewKnots, NewGC} = move_knots(Dir, Steps, Head, RopeKnots, GroundCovered),
    move_rope(Movements, NewKnots, NewGC).

move_knots(_Dir, 0, Head, RopeKnots, GroundCovered) ->
    {[Head | RopeKnots], GroundCovered};
move_knots(Dir, Steps, Head, RopeKnots, GroundCovered) ->
    {[NewHead | NewKnots], NewGC} = move_knots_once(Dir, Head, RopeKnots, GroundCovered),
    move_knots(Dir, Steps-1, NewHead, NewKnots, NewGC).

move_knots_once(Dir, Head, RopeKnots, GroundCovered) ->
    NewHead = move_head(Dir, Head),
    {NewKnots, NewGC} = maybe_follow_head(NewHead, RopeKnots, GroundCovered),
    {[NewHead | NewKnots], NewGC}.

maybe_follow_head(Head, [Tail], GroundCovered) ->
    case maybe_follow_head(Head, Tail) of
        Tail -> {[Tail], GroundCovered};
        NewTail -> {[NewTail], [NewTail | GroundCovered]}
    end;
maybe_follow_head(Head, [Next | Knots], GroundCovered) ->
    NewNext = maybe_follow_head(Head, Next),
    {NewKnots, NewGC} = maybe_follow_head(NewNext, Knots, GroundCovered),
    {[NewNext | NewKnots], NewGC}.

move_head($R, Head) ->
    move_right(Head);
move_head($L, Head) ->
    move_left(Head);
move_head($U, Head) ->
    move_up(Head);
move_head($D, Head) ->
    move_down(Head).

move_right({HeadX, HeadY}) ->
    {HeadX+1, HeadY}.

move_left({HeadX, HeadY}) ->
    {HeadX-1, HeadY}.

move_up({HeadX, HeadY}) ->
    {HeadX, HeadY-1}.

move_down({HeadX, HeadY}) ->
    {HeadX, HeadY+1}.

%% head on tail
maybe_follow_head(Head, Head) ->
    Head;

%% head left of tail
maybe_follow_head({HeadX, HeadY}, {TailX, HeadY}=Tail) when HeadX+1 =:= TailX ->
    Tail;
%% head below tail
maybe_follow_head({HeadX, HeadY}, {HeadX, TailY}=Tail) when HeadY+1 =:= TailY ->
    Tail;
%% head right of tail
maybe_follow_head({HeadX, HeadY}, {TailX, HeadY}=Tail) when HeadX-1 =:= TailX ->
    Tail;
%% head above tail
maybe_follow_head({HeadX, HeadY}, {HeadX, TailY}=Tail) when HeadY-1 =:= TailY ->
    Tail;

%% head 2-left tail
maybe_follow_head({HeadX, HeadY}, {TailX, HeadY}) when HeadX+2 =:= TailX ->
    {TailX-1, HeadY};
%% head 2-right tail
maybe_follow_head({HeadX, HeadY}, {TailX, HeadY}) when HeadX-2 =:= TailX ->
    {TailX+1, HeadY};

%% head 2-above tail
maybe_follow_head({HeadX, HeadY}, {HeadX, TailY}) when HeadY+2 =:= TailY ->
    {HeadX, TailY-1};
%% head 2-above tail
maybe_follow_head({HeadX, HeadY}, {HeadX, TailY}) when HeadY-2 =:= TailY ->
    {HeadX, TailY+1};

%% head is diagonal-1 to tail
maybe_follow_head({HeadX, HeadY}, {TailX, TailY}=Tail) when abs(HeadX-TailX) =:= 1, abs(HeadY-TailY) =:= 1 ->
    Tail;

%% move diagonally when head is up and right
maybe_follow_head({HeadX, HeadY}, {TailX, TailY}) when HeadX > TailX, HeadY < TailY ->
    {TailX+1, TailY-1};
%% move diagonally when head is up and left
maybe_follow_head({HeadX, HeadY}, {TailX, TailY}) when HeadX < TailX, HeadY < TailY ->
    {TailX-1, TailY-1};
%% move diagonally when head is down and right
maybe_follow_head({HeadX, HeadY}, {TailX, TailY}) when HeadX > TailX, HeadY > TailY ->
    {TailX+1, TailY+1};
%% move diagonally when head is down and left
maybe_follow_head({HeadX, HeadY}, {TailX, TailY}) when HeadX < TailX, HeadY > TailY ->
    {TailX-1, TailY+1}.

input() ->
    Bins = binary:split(input:input(<<?MODULE_STRING>>), <<$\n>>, ['global', 'trim']),
    [{Dir, binary_to_integer(Steps, 10)} || <<Dir:8, " ", Steps/binary>> <- Bins].
